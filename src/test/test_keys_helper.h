// Copyright (c) 2018-2019 Chaintope Inc.
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#ifndef TAPYRUS_TEST_TEST_KEYS_HELPER_H
#define TAPYRUS_TEST_TEST_KEYS_HELPER_H

#include <key.h>
#include <pubkey.h>
#include <secp256k1.h>

// validAggPrivateKey and validAggPubKeyString for tests are from
// https://github.com/chaintope/tapyrus-signer/src/5337b5e10c1bed6ecca19fd8b411fdcfbe9f1cef/README.md?at=feature%2Fschnorr_signature

//67ae3f5bfb3464b9704d7bd3a134401cc80c3a172240ebfca9f1e40f51bb6d37
const unsigned char validAggPrivateKey[32] = {0x67, 0xae, 0x3f, 0x5b, 0xfb, 0x34, 0x64, 0xb9, 0x70, 0x4d, 0x7b, 0xd3, 0xa1, 0x34, 0x40, 0x1c, 0xc8, 0x0c, 0x3a, 0x17, 0x22, 0x40, 0xeb, 0xfc, 0xa9, 0xf1, 0xe4, 0x0f, 0x51, 0xbb, 0x6d, 0x37};

const std::string validAggPubKeyString = "025700236c2890233592fcef262f4520d22af9160e3d9705855140eb2aa06c35d3";

const unsigned char validAggPubKey[33] = {0x02, 0x57, 0x00, 0x23, 0x6c, 0x28, 0x90, 0x23, 0x35, 0x92, 0xfc, 0xef, 0x26, 0x2f, 0x45, 0x20, 0xd2, 0x2a, 0xf9, 0x16, 0x0e, 0x3d, 0x97, 0x05, 0x85, 0x51, 0x40, 0xeb, 0x2a, 0xa0, 0x6c, 0x35, 0xd3};

// Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat
// generate 16 private keys from drive path m/44'/60'/0'/0....
//
// c87509a1c067bbde78beb793e6fa76530b6382a4c0241e5e4a9ec0a0f44dc0d3
// ae6ae8e5ccbfb04590405997ee2d52d2b330726137b875053c36d94e974d162f
// 0dbbe8e4ae425a6d2687f1a7e3ba17bc98c673636790f1b8ad91193c05875ef1
// c88b703fb08cbea894b6aeff5a544fb92e78a18e19814cd85da83b71f772aa6c
// 388c684f0ba1ef5017716adb5d21a053ea8e90277d0868337519f97bede61418
// 659cbb0e2411a44db63778987b1e22153c086a95eb6b18bdf89de078917abc63
// 82d052c865f5763aad42add438569276c00d3d88a2d062d36b2bae914d58b8c8
// aa3680d5d48a8283413f7a108367c7299ca73f553735860a87b08f39395618b7
// 0f62d96d6675f32685bbdb8ac13cda7c23436f63efbb9d07700d8669ff12b7c4
// 8d5366123cb560bb606379f90a0bfd4769eecc0557f1b362dcae9012b548b1e5
// dbb9d19637018267268dfc2cc7aec07e7217c1a2d6733e1184a0909273bf078b
// aa2c70c4b85a09be514292d04b27bbb0cc3f86d306d58fe87743d10a095ada07
// 3087d8decc5f951f19a442397cf1eba1e2b064e68650c346502780b56454c6e2
// 6125c8d4330941944cc6cc3e775e8620c479a5901ad627e6e734c6a6f7377428
// 1c3e5453c0f9aa74a8eb0216310b2b013f017813a648fce364bf41dbc0b37647
// ea9fe9fd2f1761fc6f1f0f23eb4d4141d7b05f2b95a1b7a9912cd97bddd9036c

const unsigned char validPrivateKeys[16][32] = {
        {0xc8,0x75,0x09,0xa1,0xc0,0x67,0xbb,0xde,0x78,0xbe,0xb7,0x93,0xe6,0xfa,0x76,0x53,0x0b,0x63,0x82,0xa4,0xc0,0x24,0x1e,0x5e,0x4a,0x9e,0xc0,0xa0,0xf4,0x4d,0xc0,0xd3},
        {0xae,0x6a,0xe8,0xe5,0xcc,0xbf,0xb0,0x45,0x90,0x40,0x59,0x97,0xee,0x2d,0x52,0xd2,0xb3,0x30,0x72,0x61,0x37,0xb8,0x75,0x05,0x3c,0x36,0xd9,0x4e,0x97,0x4d,0x16,0x2f},
        {0x0d,0xbb,0xe8,0xe4,0xae,0x42,0x5a,0x6d,0x26,0x87,0xf1,0xa7,0xe3,0xba,0x17,0xbc,0x98,0xc6,0x73,0x63,0x67,0x90,0xf1,0xb8,0xad,0x91,0x19,0x3c,0x05,0x87,0x5e,0xf1},
        {0xc8,0x8b,0x70,0x3f,0xb0,0x8c,0xbe,0xa8,0x94,0xb6,0xae,0xff,0x5a,0x54,0x4f,0xb9,0x2e,0x78,0xa1,0x8e,0x19,0x81,0x4c,0xd8,0x5d,0xa8,0x3b,0x71,0xf7,0x72,0xaa,0x6c},
        {0x38,0x8c,0x68,0x4f,0x0b,0xa1,0xef,0x50,0x17,0x71,0x6a,0xdb,0x5d,0x21,0xa0,0x53,0xea,0x8e,0x90,0x27,0x7d,0x08,0x68,0x33,0x75,0x19,0xf9,0x7b,0xed,0xe6,0x14,0x18},
        {0x65,0x9c,0xbb,0x0e,0x24,0x11,0xa4,0x4d,0xb6,0x37,0x78,0x98,0x7b,0x1e,0x22,0x15,0x3c,0x08,0x6a,0x95,0xeb,0x6b,0x18,0xbd,0xf8,0x9d,0xe0,0x78,0x91,0x7a,0xbc,0x63},
        {0x82,0xd0,0x52,0xc8,0x65,0xf5,0x76,0x3a,0xad,0x42,0xad,0xd4,0x38,0x56,0x92,0x76,0xc0,0x0d,0x3d,0x88,0xa2,0xd0,0x62,0xd3,0x6b,0x2b,0xae,0x91,0x4d,0x58,0xb8,0xc8},
        {0xaa,0x36,0x80,0xd5,0xd4,0x8a,0x82,0x83,0x41,0x3f,0x7a,0x10,0x83,0x67,0xc7,0x29,0x9c,0xa7,0x3f,0x55,0x37,0x35,0x86,0x0a,0x87,0xb0,0x8f,0x39,0x39,0x56,0x18,0xb7},
        {0x0f,0x62,0xd9,0x6d,0x66,0x75,0xf3,0x26,0x85,0xbb,0xdb,0x8a,0xc1,0x3c,0xda,0x7c,0x23,0x43,0x6f,0x63,0xef,0xbb,0x9d,0x07,0x70,0x0d,0x86,0x69,0xff,0x12,0xb7,0xc4},
        {0x8d,0x53,0x66,0x12,0x3c,0xb5,0x60,0xbb,0x60,0x63,0x79,0xf9,0x0a,0x0b,0xfd,0x47,0x69,0xee,0xcc,0x05,0x57,0xf1,0xb3,0x62,0xdc,0xae,0x90,0x12,0xb5,0x48,0xb1,0xe5},
        {0xdb,0xb9,0xd1,0x96,0x37,0x01,0x82,0x67,0x26,0x8d,0xfc,0x2c,0xc7,0xae,0xc0,0x7e,0x72,0x17,0xc1,0xa2,0xd6,0x73,0x3e,0x11,0x84,0xa0,0x90,0x92,0x73,0xbf,0x07,0x8b},
        {0xaa,0x2c,0x70,0xc4,0xb8,0x5a,0x09,0xbe,0x51,0x42,0x92,0xd0,0x4b,0x27,0xbb,0xb0,0xcc,0x3f,0x86,0xd3,0x06,0xd5,0x8f,0xe8,0x77,0x43,0xd1,0x0a,0x09,0x5a,0xda,0x07},
        {0x30,0x87,0xd8,0xde,0xcc,0x5f,0x95,0x1f,0x19,0xa4,0x42,0x39,0x7c,0xf1,0xeb,0xa1,0xe2,0xb0,0x64,0xe6,0x86,0x50,0xc3,0x46,0x50,0x27,0x80,0xb5,0x64,0x54,0xc6,0xe2},
        {0x61,0x25,0xc8,0xd4,0x33,0x09,0x41,0x94,0x4c,0xc6,0xcc,0x3e,0x77,0x5e,0x86,0x20,0xc4,0x79,0xa5,0x90,0x1a,0xd6,0x27,0xe6,0xe7,0x34,0xc6,0xa6,0xf7,0x37,0x74,0x28},
        {0x1c,0x3e,0x54,0x53,0xc0,0xf9,0xaa,0x74,0xa8,0xeb,0x02,0x16,0x31,0x0b,0x2b,0x01,0x3f,0x01,0x78,0x13,0xa6,0x48,0xfc,0xe3,0x64,0xbf,0x41,0xdb,0xc0,0xb3,0x76,0x47},
        {0xea,0x9f,0xe9,0xfd,0x2f,0x17,0x61,0xfc,0x6f,0x1f,0x0f,0x23,0xeb,0x4d,0x41,0x41,0xd7,0xb0,0x5f,0x2b,0x95,0xa1,0xb7,0xa9,0x91,0x2c,0xd9,0x7b,0xdd,0xd9,0x03,0x6c}
};

const std::vector<std::string> ValidPubKeyStrings = {
        "03af80b90d25145da28c583359beb47b21796b2fe1a23c1511e443e7a64dfdb27d",
        "02ce7edc292d7b747fab2f23584bbafaffde5c8ff17cf689969614441e0527b900",
        "02785a891f323acd6cef0fc509bb14304410595914267c50467e51c87142acbb5e",
        "02396c2c8a22ec28dbe02613027edea9a3b0c314294985e09c2f389818b29fee06",
        "03e67ceb1f0af0ab4668227984782b48d286b88e54dc91487143199728d4597c02",
        "023b435ce7b804aa66dcd65a855282479be5057fd82ce4c7c2e2430920de8b9e9e",
        "0205deb5ba6b1f7c22e79026f8301fe8d50e9e9af8514665c2440207e932d44a62",
        "0201c537fd7eb7928700927b48e51ceec621fc8ba1177ee2ad67336ed91e2f63a1",
        "033e6e1d4ae3e7e1bc2173e2af1f2f65c6284ea7c6478f2241784c77b0dff98e61",
        "02114e7960286099c603e51348df63fd0acb75f81b97a85eb4af87df9ee5ff18eb",
        "03831a69b8009833ab5b0326012eaf489bfea35a7321b1ca15b11d88131423fafc",
        "02bf2027c8455800c7626542219e6208b5fe787483689f1391d6d443ec85673ecf",
        "03b44f1cfcf46aba8bc98e2fd39f137cc43d98ab7792e4848b09c06198b042ca8b",
        "02b9a609d6bec0fdc9ba690986013cf7bbd13c54ffc25e6cf30916b4732c4a952a",
        "02e78cafe033b22bda5d7d1c8e82ee932930bf12e08489bc19769cbec765568be9",
        "02473757a955a23f75379820f3071abf5b3343b78eb54e52373d06259ffa6c550b"
};

const std::string UncompressedPubKeyString = "046b93737b4e8d93e79464f2054434015326f1834be1ec47e23377a8cc622b94a03f3c58c0c33248e2bb733269751facb479c098eec6ce254e00c7e45c103b7cd7";

std::string combinedPubkeyString(unsigned int keyCount);
std::vector<CPubKey> validPubKeys(unsigned int keyCount);
std::vector<CKey>  getValidPrivateKeys(const unsigned int keycount);

#endif //TAPYRUS_TEST_TEST_KEYS_HELPER_H
